#version 430
layout ( binding = 0, r32f ) readonly uniform image2D inImg;
layout ( binding = 1, r32f ) writeonly uniform image2D outImg;

layout (local_size_x = 1, local_size_y=1, local_size_z=1) in;


void main() {
	
	float[8] inputValues;

	ivec2 index = ivec2 (gl_GlobalInvocationID.x*8, gl_GlobalInvocationID.y);

	for(int i = 0; i < 8; i++){
	 inputValues[i] = imageLoad(inImg, ivec2(index.x + i, index.y)).x;
	}
	
	    float temporaryValue0 = inputValues[0] + inputValues[7];
	    float temporaryValue7 = inputValues[0] - inputValues[7];
	    float temporaryValue1 = inputValues[1] + inputValues[6];
	    float temporaryValue6 = inputValues[1] - inputValues[6];
	    float temporaryValue2 = inputValues[2] + inputValues[5];
	    float temporaryValue5 = inputValues[2] - inputValues[5];
	    float temporaryValue3 = inputValues[3] + inputValues[4];
	    float temporaryValue4 = inputValues[3] - inputValues[4];
	    
	    float tmp1 = temporaryValue0 + temporaryValue3;
	    float tmp2 = temporaryValue1 + temporaryValue2;
	    float tmp3 = temporaryValue1 - temporaryValue2;
	    float tmp4 = temporaryValue0 - temporaryValue3;
	    
	    imageStore(outImg, ivec2(index.x + 0, index.y), vec4(tmp1 + tmp2, 0, 0, 0));
	    imageStore(outImg, ivec2(index.x + 4, index.y), vec4(tmp1 - tmp2, 0, 0, 0));
	    
	    float mul1 = (tmp3 + tmp4) * 0.707106781;
	    
	    imageStore(outImg, ivec2(index.x + 2, index.y), vec4(tmp4 + mul1, 0, 0, 0));
	    imageStore(outImg, ivec2(index.x + 6, index.y), vec4(tmp4 - mul1, 0, 0, 0));

	    tmp1 = temporaryValue4 + temporaryValue5;
	    tmp2 = temporaryValue5 + temporaryValue6;
	    tmp3 = temporaryValue6 + temporaryValue7;

	    float mul5 = (tmp1 - tmp3) * 0.382683433;
	    float mul2 = 0.541196100 * tmp1 + mul5;
	    float mul4 = 1.306562965 * tmp3 + mul5;
	    float mul3 = tmp2 * 0.707106781;

	    float mul6 = temporaryValue7 + mul3;
	    float mul7 = temporaryValue7 - mul3;

	    imageStore(outImg, ivec2(index.x + 5, index.y), vec4(mul7 + mul2, 0, 0, 0));
	    imageStore(outImg, ivec2(index.x + 3, index.y), vec4(mul7 - mul2, 0, 0, 0));
	    imageStore(outImg, ivec2(index.x + 1, index.y), vec4(mul6 + mul4, 0, 0, 0));
	    imageStore(outImg, ivec2(index.x + 7, index.y), vec4(mul6 - mul4, 0, 0, 0));
}
